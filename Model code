# -*- coding: utf-8 -*-
"""Copy_of_Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/MaahirArora/Segment_Predictor/blob/main/Copy_of_Untitled2.ipynb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
np.set_printoptions(precision=2)
from sklearn import preprocessing

data = pd.read_csv("/content/Train.csv")
data.dropna(inplace = True)
label_encoder_1 = preprocessing.LabelEncoder()
label_encoder_2 = preprocessing.LabelEncoder()
label_encoder_3 = preprocessing.LabelEncoder()
label_encoder_4 = preprocessing.LabelEncoder()
label_encoder_5 = preprocessing.LabelEncoder()
label_encoder_6 = preprocessing.LabelEncoder()
label_encoder_7 = preprocessing.LabelEncoder()

data['Gender'] = label_encoder_1.fit_transform(data['Gender'])
data['Ever_Married'] = label_encoder_2.fit_transform(data['Ever_Married'])
data['Graduated'] = label_encoder_3.fit_transform(data['Graduated'])
data['Profession'] = label_encoder_4.fit_transform(data['Profession'])
data['Spending_Score'] = label_encoder_5.fit_transform(data['Spending_Score'])
data['Var_1'] = label_encoder_6.fit_transform(data['Var_1'])
data['Segmentation'] = label_encoder_7.fit_transform(data['Segmentation'])
X_train = data.iloc[:, 1:10]
y_train = data['Segmentation']
print(X_train.head())
print(y_train.head())
print(X_train.shape[0])
print(y_train.shape[0])
print(label_encoder_7.inverse_transform([2]))

data.columns

tf.random.set_seed(1234)
model = Sequential(
    [
        Dense(25, activation = 'relu',   name = "L1"),
        Dense(15, activation = 'relu',   name = "L2"),
        Dense(4, activation = 'linear', name = "L3")
    ]
)

model.compile(
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    optimizer=tf.keras.optimizers.Adam(0.01),
)
model.fit(
    X_train,y_train,
    epochs=200
)

test_data = pd.read_csv('/content/Test.csv')
test_data.dropna(inplace = True)

test_data['Gender'] = label_encoder_1.transform(test_data['Gender'])
test_data['Ever_Married'] = label_encoder_2.transform(test_data['Ever_Married'])
test_data['Graduated'] = label_encoder_3.transform(test_data['Graduated'])
test_data['Profession'] = label_encoder_4.transform(test_data['Profession'])
test_data['Spending_Score'] = label_encoder_5.transform(test_data['Spending_Score'])
test_data['Var_1'] = label_encoder_6.transform(test_data['Var_1'])

print(test_data.head())

test = model.predict(X_train)
predicted_labels = tf.argmax(test, axis=1).numpy()
arr = []
for i in range(len(predicted_labels)):
  arr.append(chr(predicted_labels[i]+65))
print(arr)

results = model.predict(test_data.iloc[:,1:10])
predicted_labels = tf.argmax(results, axis=1).numpy()
#print(chr(predicted_labels+65))
arr = []
for i in range(len(predicted_labels)):
  arr.append(chr(predicted_labels[i]+65))
df = pd.DataFrame(arr, columns=['Prediction'])
df.to_csv('predictions.csv', index=False)

pip install gradio

import gradio as gr
import pandas as pd
import numpy as np
import tensorflow as tf

def segment_predictor(Gender, Ever_Married, Age, Graduated, Profession, Work_Experience, Spending_Score, Family_Size, Var_1):
    columns=['Gender', 'Ever_Married', 'Age', 'Graduated', 'Profession', 'Work_Experience', 'Spending_Score', 'Family_Size', 'Var_1']
    data = pd.DataFrame(data=[np.array([Gender, Ever_Married, Age, Graduated, Profession, Work_Experience, Spending_Score, Family_Size, Var_1])],
                        columns=columns)

    data['Gender'] = label_encoder_1.transform(data['Gender'])
    data['Ever_Married'] = label_encoder_2.transform(data['Ever_Married'])
    data['Graduated'] = label_encoder_3.transform(data['Graduated'])
    data['Profession'] = label_encoder_4.transform(data['Profession'])
    data['Spending_Score'] = label_encoder_5.transform(data['Spending_Score'])
    data['Var_1'] = label_encoder_6.transform(data['Var_1'])
    data = data.astype(float)
    pred = model.predict(data.values)
    result = tf.argmax(pred, axis=1).numpy()

    return {label_encoder_7.inverse_transform(result)[0]: 0}

gr.Interface(fn=segment_predictor,
                    inputs=["text", "text", "number", "text", "text", "number", "text", "number", "text"],
                    outputs="label",
                    title="Segment Predictor").launch()
